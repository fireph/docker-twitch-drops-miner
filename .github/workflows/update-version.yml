name: Update TDM Version Tag

on:
  schedule:
    - cron: "19 8 * * *"
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: "main"

      - name: Get latest dev-build release
        id: get-release
        run: |
          # Get the latest dev-build release info
          release_info=$(curl -s "https://api.github.com/repos/fireph/TwitchDropsMiner/releases/tags/dev-build")

          # Extract commit hash from "Reference commit: xxxxx" in body using capture group
          commit_hash=$(echo "$release_info" | jq -r '.body' | sed -n 's/.*Reference commit: \([a-f0-9]\+\).*/\1/p')

          if [ -z "$commit_hash" ]; then
            echo "Could not extract commit hash from release body"
            exit 1
          fi

          # Take first 7 characters of commit hash
          short_commit=${commit_hash:0:7}

          echo "commit_hash=$short_commit" >> $GITHUB_OUTPUT
          echo "full_commit_hash=$commit_hash" >> $GITHUB_OUTPUT
          echo "Found commit hash: $short_commit (full: $commit_hash)"

      - name: Check current version in Dockerfile
        id: current-version
        run: |
          current_version=$(grep "ENV TDM_VERSION_TAG=" Dockerfile | cut -d'=' -f2)
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"

      - name: Update Dockerfile if version changed
        id: update-dockerfile
        run: |
          commit_hash="${{ steps.get-release.outputs.commit_hash }}"
          new_version="16.dev.$commit_hash"
          current_version="${{ steps.current-version.outputs.current_version }}"

          if [ "$new_version" != "$current_version" ]; then
            echo "Version changed from $current_version to $new_version"
            sed -i "s/ENV TDM_VERSION_TAG=.*/ENV TDM_VERSION_TAG=$new_version/" Dockerfile
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $current_version"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.update-dockerfile.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Dockerfile
          git commit -m "Update TDM_VERSION_TAG to ${{ steps.update-dockerfile.outputs.new_version }}"
          git push

      - name: Create GitHub Release
        if: steps.update-dockerfile.outputs.changed == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.update-dockerfile.outputs.new_version }}
          release_name: "v${{ steps.update-dockerfile.outputs.new_version }}"
          body: |
            Updated Twitch Drops Miner to v${{ steps.update-dockerfile.outputs.new_version }}

            Reference commit: https://github.com/fireph/TwitchDropsMiner/commit/${{ steps.get-release.outputs.full_commit_hash }}

            Docker image at: https://hub.docker.com/r/dungfu/twitch-drops-miner
          draft: false
          prerelease: false
